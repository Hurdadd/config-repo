spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "http://localhost:8180/realms/bnpl-platform"
  application:
    name: user-service


  data:
    redis:
      host: redis
      password: s3cret!
      timeout: 2s
  datasource:
    url: jdbc:postgresql://localhost:5434/user-service
    username: postgres
    password: 1234
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      linger-ms: 5
      retries: 5
      properties:
        enable.idempotence: true
    consumer:
      group-id: user-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
      auto-offset-reset: earliest



resilience4j:
  circuitbreaker:
    instances:
      ext-kyc: { slidingWindowType: COUNT_BASED, slidingWindowSize: 20, failureRateThreshold: 50, waitDurationInOpenState: 10s }
      ext-risk: { slidingWindowType: COUNT_BASED, slidingWindowSize: 20, failureRateThreshold: 50, waitDurationInOpenState: 10s }
      ext-sanctions: { slidingWindowType: COUNT_BASED, slidingWindowSize: 20, failureRateThreshold: 50, waitDurationInOpenState: 10s }

  timelimiter:
    instances:
      ext-kyc:
        timeoutDuration: 2s
      ext-sanctions:
        timeoutDuration: 2s
outbox:
  batch-size: 100
  poll-interval-ms: 1000
  max-attempts: 10
  initial-backoff-ms: 200
  backoff-multiplier: 2.0
  max-backoff-ms: 10000
  jitter-ms: 200
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,loggers
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    tags:
      application: user-service
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
http:
  client:
    connect-timeout-ms: 1000
    read-timeout-ms: 2000
server:
  port: 8020

app:
  audience: user-service
